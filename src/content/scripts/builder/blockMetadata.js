// Block metadata for the Zanpo builder
// This defines families, variants, and block properties

// Generate ranges for block families
function generateRange(start, end) {
    const range = [];
    for (let i = start; i <= end; i++) {
        range.push(i);
    }
    return range;
}

// Block rotation mapping all figured out manually
export const blockRotations = {
    3: [3, 4, 5, 6],
    4: [4, 5, 6, 3],
    5: [5, 6, 3, 4],
    6: [6, 3, 4, 5],
    7: [7, 8, 9, 10],
    8: [8, 9, 10, 7],
    9: [9, 10, 7, 8],
    10: [10, 7, 8, 9],
    11: [11, 12, 13, 14],
    12: [12, 13, 14, 11],
    13: [13, 14, 11, 12],
    14: [14, 11, 12, 13],
    15: [15, 16, 17, 18],
    16: [16, 17, 18, 15],
    17: [17, 18, 15, 16],
    18: [18, 15, 16, 17],
    19: [19, 20, 21, 22],
    20: [20, 21, 22, 19],
    21: [21, 22, 19, 20],
    22: [22, 19, 20, 21],
    23: [23, 24, 25, 26],
    24: [24, 25, 26, 23],
    25: [25, 26, 23, 24],
    26: [26, 23, 24, 25],
    27: [27, 28, 29, 30],
    28: [28, 29, 30, 27],
    29: [29, 30, 27, 28],
    30: [30, 27, 28, 29],
    31: [31, 32, 33, 34],
    32: [32, 33, 34, 31],
    33: [33, 34, 31, 32],
    34: [34, 31, 32, 33],
    35: [35, 36, 37, 38],
    36: [36, 37, 38, 35],
    37: [37, 38, 35, 36],
    38: [38, 35, 36, 37],
    41: [41, 42],
    42: [42, 41],
    43: [43, 44, 45, 46],
    44: [44, 45, 46, 43],
    45: [45, 46, 43, 44],
    46: [46, 43, 44, 45],
    47: [47, 48, 49, 50],
    48: [48, 49, 50, 47],
    49: [49, 50, 47, 48],
    50: [50, 47, 48, 49],
    51: [51, 52, 53, 54],
    52: [52, 53, 54, 51],
    53: [53, 54, 51, 52],
    54: [54, 51, 52, 53],
    71: [71, 72, 73, 74],
    72: [72, 73, 74, 71],
    73: [73, 74, 71, 72],
    74: [74, 71, 72, 73],
    75: [75, 76, 77, 78],
    76: [76, 77, 78, 75],
    77: [77, 78, 75, 76],
    78: [78, 75, 76, 77],
    79: [79, 80, 81, 82],
    80: [80, 81, 82, 79],
    81: [81, 82, 79, 80],
    82: [82, 79, 80, 81],
    87: [87, 88],
    88: [88, 87],
    89: [89, 90, 91, 92],
    90: [90, 91, 92, 89],
    91: [91, 92, 89, 90],
    92: [92, 89, 90, 91],
    94: [94, 95, 96, 97],
    95: [95, 96, 97, 94],
    96: [96, 97, 94, 95],
    97: [97, 94, 95, 96],
    98: [98, 99, 100, 101],
    99: [99, 100, 101, 98],
    100: [100, 101, 98, 99],
    101: [101, 98, 99, 100],
    102: [102, 103, 104, 105],
    103: [103, 104, 105, 102],
    104: [104, 105, 102, 103],
    105: [105, 102, 103, 104],
    106: [106, 107],
    107: [107, 106],
    108: [108, 109],
    109: [109, 108],
    110: [110, 111],
    111: [111, 110],
    112: [112, 113],
    113: [113, 112],
    115: [115, 116, 117, 118],
    116: [116, 117, 118, 115],
    117: [117, 118, 115, 116],
    118: [118, 115, 116, 117],
    119: [119, 120, 121, 122],
    120: [120, 121, 122, 119],
    121: [121, 122, 119, 120],
    122: [122, 119, 120, 121],
    123: [123, 124, 125, 126],
    124: [124, 125, 126, 123],
    125: [125, 126, 123, 124],
    126: [126, 123, 124, 125],
    131: [131, 132],
    132: [132, 131],
    133: [133, 134, 135, 136],
    134: [134, 135, 136, 133],
    135: [135, 136, 133, 134],
    136: [136, 133, 134, 135],
    138: [138, 139, 140, 141],
    139: [139, 140, 141, 138],
    140: [140, 141, 138, 139],
    141: [141, 138, 139, 140],
    142: [142, 143, 144, 145],
    143: [143, 144, 145, 142],
    144: [144, 145, 142, 143],
    145: [145, 142, 143, 144],
    146: [146, 147, 148, 149],
    147: [147, 148, 149, 146],
    148: [148, 149, 146, 147],
    149: [149, 146, 147, 148],
    150: [150, 151],
    151: [151, 150],
    152: [152, 153],
    153: [153, 152],
    154: [154, 155],
    155: [155, 154],
    156: [156, 157],
    157: [157, 156],
    159: [159, 160, 161, 162],
    160: [160, 161, 162, 159],
    161: [161, 162, 159, 160],
    162: [162, 159, 160, 161],
    163: [163, 164, 165, 166],
    164: [164, 165, 166, 163],
    165: [165, 166, 163, 164],
    166: [166, 163, 164, 165],
    167: [167, 168, 169, 170],
    168: [168, 169, 170, 167],
    169: [169, 170, 167, 168],
    170: [170, 167, 168, 169],
    175: [175, 176],
    176: [176, 175],
    177: [177, 178, 179, 180],
    178: [178, 179, 180, 177],
    179: [179, 180, 177, 178],
    180: [180, 177, 178, 179],
    182: [182, 183, 184, 185],
    183: [183, 184, 185, 182],
    184: [184, 185, 182, 183],
    185: [185, 182, 183, 184],
    186: [186, 187, 188, 189],
    187: [187, 188, 189, 186],
    188: [188, 189, 186, 187],
    189: [189, 186, 187, 188],
    190: [190, 191, 192, 193],
    191: [191, 192, 193, 190],
    192: [192, 193, 190, 191],
    193: [193, 190, 191, 192],
    194: [194, 195],
    195: [195, 194],
    196: [196, 197],
    197: [197, 196],
    198: [198, 199],
    199: [199, 198],
    200: [200, 201],
    201: [201, 200],
    203: [203, 204, 205, 206],
    204: [204, 205, 206, 203],
    205: [205, 206, 203, 204],
    206: [206, 203, 204, 205],
    207: [207, 208, 209, 210],
    208: [208, 209, 210, 207],
    209: [209, 210, 207, 208],
    210: [210, 207, 208, 209],
    211: [211, 212, 213, 214],
    212: [212, 213, 214, 211],
    213: [213, 214, 211, 212],
    214: [214, 211, 212, 213],
    219: [219, 220],
    220: [220, 219],
    221: [221, 222, 223, 224],
    222: [222, 223, 224, 221],
    223: [223, 224, 221, 222],
    224: [224, 221, 222, 223],
    226: [226, 227, 228, 229],
    227: [227, 228, 229, 226],
    228: [228, 229, 226, 227],
    229: [229, 226, 227, 228],
    230: [230, 231, 232, 233],
    231: [231, 232, 233, 230],
    232: [232, 233, 230, 231],
    233: [233, 230, 231, 232],
    234: [234, 235, 236, 237],
    235: [235, 236, 237, 234],
    236: [236, 237, 234, 235],
    237: [237, 234, 235, 236],
    238: [238, 239],
    239: [239, 238],
    240: [240, 241],
    241: [241, 240],
    242: [242, 243],
    243: [243, 242],
    244: [244, 245],
    245: [245, 244],
    247: [247, 248, 249, 250],
    248: [248, 249, 250, 247],
    249: [249, 250, 247, 248],
    250: [250, 247, 248, 249],
    251: [251, 252, 253, 254],
    252: [252, 253, 254, 251],
    253: [253, 254, 251, 252],
    254: [254, 251, 252, 253],
    255: [255, 256, 257, 258],
    256: [256, 257, 258, 255],
    257: [257, 258, 255, 256],
    258: [258, 255, 256, 257],
    259: [259, 260, 261, 262],
    260: [260, 261, 262, 259],
    261: [261, 262, 259, 260],
    262: [262, 259, 260, 261],
    263: [263, 264, 265, 266],
    264: [264, 265, 266, 263],
    265: [265, 266, 263, 264],
    266: [266, 263, 264, 265],
};

export const blockFamilies = [
    {
        id: 'ground',
        name: 'Ground',
        icon: 1,
        variants: generateRange(1, 39)
    },
    {
        id: 'roads',
        name: 'Roads',
        icon: 40,
        variants: generateRange(40, 64)
    },
    {
        id: 'buildings',
        name: 'Buildings',
        icon: 65,
        variants: generateRange(65, 149)
    },
    {
        id: 'nature',
        name: 'Nature',
        icon: 150,
        variants: generateRange(150, 199)
    },
    {
        id: 'decorations',
        name: 'Decorations',
        icon: 200,
        variants: generateRange(200, 299)
    },
    {
        id: 'special',
        name: 'Special',
        icon: 300,
        variants: generateRange(300, 387)
    }
];

// Generate block data for all blocks
export const blockData = {};

// Auto-generate data for all blocks
for (let i = 1; i <= 387; i++) {
    let family = 'ground';
    let color = '#808080';
    
    if (i >= 1 && i <= 39) {
        family = 'ground';
        color = '#7CFC00';
    } else if (i >= 40 && i <= 64) {
        family = 'roads';
        color = '#404040';
    } else if (i >= 65 && i <= 149) {
        family = 'buildings';
        color = '#BEBEBE';
    } else if (i >= 150 && i <= 199) {
        family = 'nature';
        color = '#228B22';
    } else if (i >= 200 && i <= 299) {
        family = 'decorations';
        color = '#FFD700';
    } else if (i >= 300 && i <= 387) {
        family = 'special';
        color = '#9370DB';
    }
    
    blockData[i] = {
        name: `Block ${i}`,
        family: family,
        color: color
    };
}

export function getBlockInfo(blockId) {
    return blockData[blockId] || { name: 'Unknown', family: 'unknown', color: '#808080' };
}

export function getBlocksByFamily(familyId) {
    const family = blockFamilies.find(f => f.id === familyId);
    return family ? family.variants : [];
}

// Rotation helper functions
export function getNextRotation(blockId) {
    const rotationFamily = blockRotations[blockId];
    if (!rotationFamily) return blockId; // No rotation available
    
    const currentIndex = rotationFamily.indexOf(blockId);
    if (currentIndex === -1) return blockId;
    
    // Cycle to next rotation
    const nextIndex = (currentIndex + 1) % rotationFamily.length;
    return rotationFamily[nextIndex];
}

export function getPreviousRotation(blockId) {
    const rotationFamily = blockRotations[blockId];
    if (!rotationFamily) return blockId; // No rotation available
    
    const currentIndex = rotationFamily.indexOf(blockId);
    if (currentIndex === -1) return blockId;
    
    // Cycle to previous rotation
    const prevIndex = (currentIndex - 1 + rotationFamily.length) % rotationFamily.length;
    return rotationFamily[prevIndex];
}

export function hasRotation(blockId) {
    return blockRotations.hasOwnProperty(blockId);
}

export function getRotationFamily(blockId) {
    return blockRotations[blockId] || null;
}
